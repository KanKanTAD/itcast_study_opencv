# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_robot_move_msgs/SvgToPntssRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SvgToPntssRequest(genpy.Message):
  _md5sum = "b21a7eada4f3de7e883b7afd845e0a94"
  _type = "my_robot_move_msgs/SvgToPntssRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 ori_x
float32 ori_y
float32 ori_z
float32 tran_z

float32 rx
float32 ry
float32 rz

float32 width
float32 height

float32 svg_width
float32 svg_height
string[] svg_pathds

"""
  __slots__ = ['ori_x','ori_y','ori_z','tran_z','rx','ry','rz','width','height','svg_width','svg_height','svg_pathds']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ori_x,ori_y,ori_z,tran_z,rx,ry,rz,width,height,svg_width,svg_height,svg_pathds

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SvgToPntssRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ori_x is None:
        self.ori_x = 0.
      if self.ori_y is None:
        self.ori_y = 0.
      if self.ori_z is None:
        self.ori_z = 0.
      if self.tran_z is None:
        self.tran_z = 0.
      if self.rx is None:
        self.rx = 0.
      if self.ry is None:
        self.ry = 0.
      if self.rz is None:
        self.rz = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.svg_width is None:
        self.svg_width = 0.
      if self.svg_height is None:
        self.svg_height = 0.
      if self.svg_pathds is None:
        self.svg_pathds = []
    else:
      self.ori_x = 0.
      self.ori_y = 0.
      self.ori_z = 0.
      self.tran_z = 0.
      self.rx = 0.
      self.ry = 0.
      self.rz = 0.
      self.width = 0.
      self.height = 0.
      self.svg_width = 0.
      self.svg_height = 0.
      self.svg_pathds = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11f().pack(_x.ori_x, _x.ori_y, _x.ori_z, _x.tran_z, _x.rx, _x.ry, _x.rz, _x.width, _x.height, _x.svg_width, _x.svg_height))
      length = len(self.svg_pathds)
      buff.write(_struct_I.pack(length))
      for val1 in self.svg_pathds:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.ori_x, _x.ori_y, _x.ori_z, _x.tran_z, _x.rx, _x.ry, _x.rz, _x.width, _x.height, _x.svg_width, _x.svg_height,) = _get_struct_11f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svg_pathds = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.svg_pathds.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11f().pack(_x.ori_x, _x.ori_y, _x.ori_z, _x.tran_z, _x.rx, _x.ry, _x.rz, _x.width, _x.height, _x.svg_width, _x.svg_height))
      length = len(self.svg_pathds)
      buff.write(_struct_I.pack(length))
      for val1 in self.svg_pathds:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.ori_x, _x.ori_y, _x.ori_z, _x.tran_z, _x.rx, _x.ry, _x.rz, _x.width, _x.height, _x.svg_width, _x.svg_height,) = _get_struct_11f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.svg_pathds = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.svg_pathds.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11f = None
def _get_struct_11f():
    global _struct_11f
    if _struct_11f is None:
        _struct_11f = struct.Struct("<11f")
    return _struct_11f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_robot_move_msgs/SvgToPntssResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_robot_move_msgs.msg

class SvgToPntssResponse(genpy.Message):
  _md5sum = "483f7d3077cf442487d1afffe2c7d29b"
  _type = "my_robot_move_msgs/SvgToPntssResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
my_robot_move_msgs/Points pts


================================================================================
MSG: my_robot_move_msgs/Points
Point[] data

================================================================================
MSG: my_robot_move_msgs/Point
float32 x
float32 y
float32 z
float32 rx
float32 ry
float32 rz
"""
  __slots__ = ['pts']
  _slot_types = ['my_robot_move_msgs/Points']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SvgToPntssResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pts is None:
        self.pts = my_robot_move_msgs.msg.Points()
    else:
      self.pts = my_robot_move_msgs.msg.Points()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.pts.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts.data:
        _x = val1
        buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pts is None:
        self.pts = my_robot_move_msgs.msg.Points()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts.data = []
      for i in range(0, length):
        val1 = my_robot_move_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz,) = _get_struct_6f().unpack(str[start:end])
        self.pts.data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.pts.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts.data:
        _x = val1
        buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pts is None:
        self.pts = my_robot_move_msgs.msg.Points()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts.data = []
      for i in range(0, length):
        val1 = my_robot_move_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz,) = _get_struct_6f().unpack(str[start:end])
        self.pts.data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
class SvgToPntss(object):
  _type          = 'my_robot_move_msgs/SvgToPntss'
  _md5sum = '60816149316c144de894d769a72c05f1'
  _request_class  = SvgToPntssRequest
  _response_class = SvgToPntssResponse
