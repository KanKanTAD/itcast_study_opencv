# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_robot_move_actions/PainterMoveGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_robot_move_msgs.msg

class PainterMoveGoal(genpy.Message):
  _md5sum = "a335a4998eb8ceb23d4bb2646fae6a2a"
  _type = "my_robot_move_actions/PainterMoveGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
float32 acceleration
float32 velocity 
float32 z_coef
my_robot_move_msgs/Pointss ways

================================================================================
MSG: my_robot_move_msgs/Pointss
Points[] data

================================================================================
MSG: my_robot_move_msgs/Points
Point[] data

================================================================================
MSG: my_robot_move_msgs/Point
float32 x
float32 y
float32 z
float32 rx
float32 ry
float32 rz
"""
  __slots__ = ['acceleration','velocity','z_coef','ways']
  _slot_types = ['float32','float32','float32','my_robot_move_msgs/Pointss']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       acceleration,velocity,z_coef,ways

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PainterMoveGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.acceleration is None:
        self.acceleration = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.z_coef is None:
        self.z_coef = 0.
      if self.ways is None:
        self.ways = my_robot_move_msgs.msg.Pointss()
    else:
      self.acceleration = 0.
      self.velocity = 0.
      self.z_coef = 0.
      self.ways = my_robot_move_msgs.msg.Pointss()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.acceleration, _x.velocity, _x.z_coef))
      length = len(self.ways.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.ways.data:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.data:
          _x = val2
          buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ways is None:
        self.ways = my_robot_move_msgs.msg.Pointss()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.acceleration, _x.velocity, _x.z_coef,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ways.data = []
      for i in range(0, length):
        val1 = my_robot_move_msgs.msg.Points()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.data = []
        for i in range(0, length):
          val2 = my_robot_move_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz,) = _get_struct_6f().unpack(str[start:end])
          val1.data.append(val2)
        self.ways.data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.acceleration, _x.velocity, _x.z_coef))
      length = len(self.ways.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.ways.data:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.data:
          _x = val2
          buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ways is None:
        self.ways = my_robot_move_msgs.msg.Pointss()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.acceleration, _x.velocity, _x.z_coef,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ways.data = []
      for i in range(0, length):
        val1 = my_robot_move_msgs.msg.Points()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.data = []
        for i in range(0, length):
          val2 = my_robot_move_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz,) = _get_struct_6f().unpack(str[start:end])
          val1.data.append(val2)
        self.ways.data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
