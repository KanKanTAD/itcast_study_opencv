// Generated by gencpp from file my_robot_move_msgs/PainterMoveGoal.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_MOVE_MSGS_MESSAGE_PAINTERMOVEGOAL_H
#define MY_ROBOT_MOVE_MSGS_MESSAGE_PAINTERMOVEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_robot_move_msgs/Points.h>

namespace my_robot_move_msgs
{
template <class ContainerAllocator>
struct PainterMoveGoal_
{
  typedef PainterMoveGoal_<ContainerAllocator> Type;

  PainterMoveGoal_()
    : host()
    , port(0)
    , acceleration(0.0)
    , velocity(0.0)
    , epsilon(0.0)
    , ways()  {
    }
  PainterMoveGoal_(const ContainerAllocator& _alloc)
    : host(_alloc)
    , port(0)
    , acceleration(0.0)
    , velocity(0.0)
    , epsilon(0.0)
    , ways(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _host_type;
  _host_type host;

   typedef int32_t _port_type;
  _port_type port;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _epsilon_type;
  _epsilon_type epsilon;

   typedef  ::my_robot_move_msgs::Points_<ContainerAllocator>  _ways_type;
  _ways_type ways;





  typedef boost::shared_ptr< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PainterMoveGoal_

typedef ::my_robot_move_msgs::PainterMoveGoal_<std::allocator<void> > PainterMoveGoal;

typedef boost::shared_ptr< ::my_robot_move_msgs::PainterMoveGoal > PainterMoveGoalPtr;
typedef boost::shared_ptr< ::my_robot_move_msgs::PainterMoveGoal const> PainterMoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator1> & lhs, const ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.host == rhs.host &&
    lhs.port == rhs.port &&
    lhs.acceleration == rhs.acceleration &&
    lhs.velocity == rhs.velocity &&
    lhs.epsilon == rhs.epsilon &&
    lhs.ways == rhs.ways;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator1> & lhs, const ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_move_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2eaee159032b051f1ffcf20961a0ee4e";
  }

  static const char* value(const ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2eaee159032b051fULL;
  static const uint64_t static_value2 = 0x1ffcf20961a0ee4eULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_move_msgs/PainterMoveGoal";
  }

  static const char* value(const ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string host\n"
"int32 port\n"
"float32 acceleration\n"
"float32 velocity \n"
"float32 epsilon\n"
"my_robot_move_msgs/Points ways\n"
"\n"
"\n"
"================================================================================\n"
"MSG: my_robot_move_msgs/Points\n"
"Point[] data\n"
"\n"
"================================================================================\n"
"MSG: my_robot_move_msgs/Point\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 rx\n"
"float32 ry\n"
"float32 rz\n"
;
  }

  static const char* value(const ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.host);
      stream.next(m.port);
      stream.next(m.acceleration);
      stream.next(m.velocity);
      stream.next(m.epsilon);
      stream.next(m.ways);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PainterMoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_move_msgs::PainterMoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "host: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.host);
    s << indent << "port: ";
    Printer<int32_t>::stream(s, indent + "  ", v.port);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "epsilon: ";
    Printer<float>::stream(s, indent + "  ", v.epsilon);
    s << indent << "ways: ";
    s << std::endl;
    Printer< ::my_robot_move_msgs::Points_<ContainerAllocator> >::stream(s, indent + "  ", v.ways);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_MOVE_MSGS_MESSAGE_PAINTERMOVEGOAL_H
