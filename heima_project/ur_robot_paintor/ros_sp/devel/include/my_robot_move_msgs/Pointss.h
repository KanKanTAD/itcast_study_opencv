// Generated by gencpp from file my_robot_move_msgs/Pointss.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_MOVE_MSGS_MESSAGE_POINTSS_H
#define MY_ROBOT_MOVE_MSGS_MESSAGE_POINTSS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_robot_move_msgs/Points.h>

namespace my_robot_move_msgs
{
template <class ContainerAllocator>
struct Pointss_
{
  typedef Pointss_<ContainerAllocator> Type;

  Pointss_()
    : data()  {
    }
  Pointss_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::my_robot_move_msgs::Points_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::my_robot_move_msgs::Points_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::my_robot_move_msgs::Pointss_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_move_msgs::Pointss_<ContainerAllocator> const> ConstPtr;

}; // struct Pointss_

typedef ::my_robot_move_msgs::Pointss_<std::allocator<void> > Pointss;

typedef boost::shared_ptr< ::my_robot_move_msgs::Pointss > PointssPtr;
typedef boost::shared_ptr< ::my_robot_move_msgs::Pointss const> PointssConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_move_msgs::Pointss_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_move_msgs::Pointss_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_move_msgs::Pointss_<ContainerAllocator1> & lhs, const ::my_robot_move_msgs::Pointss_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_move_msgs::Pointss_<ContainerAllocator1> & lhs, const ::my_robot_move_msgs::Pointss_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_move_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_robot_move_msgs::Pointss_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_move_msgs::Pointss_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_move_msgs::Pointss_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_move_msgs::Pointss_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_move_msgs::Pointss_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_move_msgs::Pointss_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_move_msgs::Pointss_<ContainerAllocator> >
{
  static const char* value()
  {
    return "252224edcc17c0fb24b03717a7beba36";
  }

  static const char* value(const ::my_robot_move_msgs::Pointss_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x252224edcc17c0fbULL;
  static const uint64_t static_value2 = 0x24b03717a7beba36ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_move_msgs::Pointss_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_move_msgs/Pointss";
  }

  static const char* value(const ::my_robot_move_msgs::Pointss_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_move_msgs::Pointss_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Points[] data\n"
"\n"
"================================================================================\n"
"MSG: my_robot_move_msgs/Points\n"
"Point[] data\n"
"\n"
"================================================================================\n"
"MSG: my_robot_move_msgs/Point\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 rx\n"
"float32 ry\n"
"float32 rz\n"
;
  }

  static const char* value(const ::my_robot_move_msgs::Pointss_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_move_msgs::Pointss_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pointss_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_move_msgs::Pointss_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_move_msgs::Pointss_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::my_robot_move_msgs::Points_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_MOVE_MSGS_MESSAGE_POINTSS_H
