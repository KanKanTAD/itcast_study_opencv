// Generated by gencpp from file my_robot_move_msgs/SvgToPntssRequest.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_MOVE_MSGS_MESSAGE_SVGTOPNTSSREQUEST_H
#define MY_ROBOT_MOVE_MSGS_MESSAGE_SVGTOPNTSSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_robot_move_msgs
{
template <class ContainerAllocator>
struct SvgToPntssRequest_
{
  typedef SvgToPntssRequest_<ContainerAllocator> Type;

  SvgToPntssRequest_()
    : ori_x(0.0)
    , ori_y(0.0)
    , ori_z(0.0)
    , tran_z(0.0)
    , rx(0.0)
    , ry(0.0)
    , rz(0.0)
    , width(0.0)
    , height(0.0)
    , svg_width(0.0)
    , svg_height(0.0)
    , svg_pathds()  {
    }
  SvgToPntssRequest_(const ContainerAllocator& _alloc)
    : ori_x(0.0)
    , ori_y(0.0)
    , ori_z(0.0)
    , tran_z(0.0)
    , rx(0.0)
    , ry(0.0)
    , rz(0.0)
    , width(0.0)
    , height(0.0)
    , svg_width(0.0)
    , svg_height(0.0)
    , svg_pathds(_alloc)  {
  (void)_alloc;
    }



   typedef float _ori_x_type;
  _ori_x_type ori_x;

   typedef float _ori_y_type;
  _ori_y_type ori_y;

   typedef float _ori_z_type;
  _ori_z_type ori_z;

   typedef float _tran_z_type;
  _tran_z_type tran_z;

   typedef float _rx_type;
  _rx_type rx;

   typedef float _ry_type;
  _ry_type ry;

   typedef float _rz_type;
  _rz_type rz;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef float _svg_width_type;
  _svg_width_type svg_width;

   typedef float _svg_height_type;
  _svg_height_type svg_height;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _svg_pathds_type;
  _svg_pathds_type svg_pathds;





  typedef boost::shared_ptr< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SvgToPntssRequest_

typedef ::my_robot_move_msgs::SvgToPntssRequest_<std::allocator<void> > SvgToPntssRequest;

typedef boost::shared_ptr< ::my_robot_move_msgs::SvgToPntssRequest > SvgToPntssRequestPtr;
typedef boost::shared_ptr< ::my_robot_move_msgs::SvgToPntssRequest const> SvgToPntssRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator1> & lhs, const ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ori_x == rhs.ori_x &&
    lhs.ori_y == rhs.ori_y &&
    lhs.ori_z == rhs.ori_z &&
    lhs.tran_z == rhs.tran_z &&
    lhs.rx == rhs.rx &&
    lhs.ry == rhs.ry &&
    lhs.rz == rhs.rz &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.svg_width == rhs.svg_width &&
    lhs.svg_height == rhs.svg_height &&
    lhs.svg_pathds == rhs.svg_pathds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator1> & lhs, const ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_move_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b21a7eada4f3de7e883b7afd845e0a94";
  }

  static const char* value(const ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb21a7eada4f3de7eULL;
  static const uint64_t static_value2 = 0x883b7afd845e0a94ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_move_msgs/SvgToPntssRequest";
  }

  static const char* value(const ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ori_x\n"
"float32 ori_y\n"
"float32 ori_z\n"
"float32 tran_z\n"
"\n"
"float32 rx\n"
"float32 ry\n"
"float32 rz\n"
"\n"
"float32 width\n"
"float32 height\n"
"\n"
"float32 svg_width\n"
"float32 svg_height\n"
"string[] svg_pathds\n"
"\n"
;
  }

  static const char* value(const ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ori_x);
      stream.next(m.ori_y);
      stream.next(m.ori_z);
      stream.next(m.tran_z);
      stream.next(m.rx);
      stream.next(m.ry);
      stream.next(m.rz);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.svg_width);
      stream.next(m.svg_height);
      stream.next(m.svg_pathds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SvgToPntssRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_move_msgs::SvgToPntssRequest_<ContainerAllocator>& v)
  {
    s << indent << "ori_x: ";
    Printer<float>::stream(s, indent + "  ", v.ori_x);
    s << indent << "ori_y: ";
    Printer<float>::stream(s, indent + "  ", v.ori_y);
    s << indent << "ori_z: ";
    Printer<float>::stream(s, indent + "  ", v.ori_z);
    s << indent << "tran_z: ";
    Printer<float>::stream(s, indent + "  ", v.tran_z);
    s << indent << "rx: ";
    Printer<float>::stream(s, indent + "  ", v.rx);
    s << indent << "ry: ";
    Printer<float>::stream(s, indent + "  ", v.ry);
    s << indent << "rz: ";
    Printer<float>::stream(s, indent + "  ", v.rz);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "svg_width: ";
    Printer<float>::stream(s, indent + "  ", v.svg_width);
    s << indent << "svg_height: ";
    Printer<float>::stream(s, indent + "  ", v.svg_height);
    s << indent << "svg_pathds[]" << std::endl;
    for (size_t i = 0; i < v.svg_pathds.size(); ++i)
    {
      s << indent << "  svg_pathds[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.svg_pathds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_MOVE_MSGS_MESSAGE_SVGTOPNTSSREQUEST_H
