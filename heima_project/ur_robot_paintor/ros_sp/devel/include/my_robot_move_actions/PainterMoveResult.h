// Generated by gencpp from file my_robot_move_actions/PainterMoveResult.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_MOVE_ACTIONS_MESSAGE_PAINTERMOVERESULT_H
#define MY_ROBOT_MOVE_ACTIONS_MESSAGE_PAINTERMOVERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_robot_move_actions
{
template <class ContainerAllocator>
struct PainterMoveResult_
{
  typedef PainterMoveResult_<ContainerAllocator> Type;

  PainterMoveResult_()
    : code(0)
    , percent(0.0)  {
    }
  PainterMoveResult_(const ContainerAllocator& _alloc)
    : code(0)
    , percent(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _code_type;
  _code_type code;

   typedef float _percent_type;
  _percent_type percent;





  typedef boost::shared_ptr< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> const> ConstPtr;

}; // struct PainterMoveResult_

typedef ::my_robot_move_actions::PainterMoveResult_<std::allocator<void> > PainterMoveResult;

typedef boost::shared_ptr< ::my_robot_move_actions::PainterMoveResult > PainterMoveResultPtr;
typedef boost::shared_ptr< ::my_robot_move_actions::PainterMoveResult const> PainterMoveResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator1> & lhs, const ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator2> & rhs)
{
  return lhs.code == rhs.code &&
    lhs.percent == rhs.percent;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator1> & lhs, const ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_move_actions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5053711a54ca494b316fa2656b50fa8f";
  }

  static const char* value(const ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5053711a54ca494bULL;
  static const uint64_t static_value2 = 0x316fa2656b50fa8fULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_move_actions/PainterMoveResult";
  }

  static const char* value(const ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"int32 code\n"
"float32 percent\n"
"\n"
;
  }

  static const char* value(const ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.code);
      stream.next(m.percent);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PainterMoveResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_move_actions::PainterMoveResult_<ContainerAllocator>& v)
  {
    s << indent << "code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.code);
    s << indent << "percent: ";
    Printer<float>::stream(s, indent + "  ", v.percent);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_MOVE_ACTIONS_MESSAGE_PAINTERMOVERESULT_H
