// Auto-generated. Do not edit!

// (in-package my_robot_move_actions.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let my_robot_move_msgs = _finder('my_robot_move_msgs');

//-----------------------------------------------------------

class PainterMoveGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.acceleration = null;
      this.velocity = null;
      this.z_coef = null;
      this.ways = null;
    }
    else {
      if (initObj.hasOwnProperty('acceleration')) {
        this.acceleration = initObj.acceleration
      }
      else {
        this.acceleration = 0.0;
      }
      if (initObj.hasOwnProperty('velocity')) {
        this.velocity = initObj.velocity
      }
      else {
        this.velocity = 0.0;
      }
      if (initObj.hasOwnProperty('z_coef')) {
        this.z_coef = initObj.z_coef
      }
      else {
        this.z_coef = 0.0;
      }
      if (initObj.hasOwnProperty('ways')) {
        this.ways = initObj.ways
      }
      else {
        this.ways = new my_robot_move_msgs.msg.Pointss();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PainterMoveGoal
    // Serialize message field [acceleration]
    bufferOffset = _serializer.float32(obj.acceleration, buffer, bufferOffset);
    // Serialize message field [velocity]
    bufferOffset = _serializer.float32(obj.velocity, buffer, bufferOffset);
    // Serialize message field [z_coef]
    bufferOffset = _serializer.float32(obj.z_coef, buffer, bufferOffset);
    // Serialize message field [ways]
    bufferOffset = my_robot_move_msgs.msg.Pointss.serialize(obj.ways, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PainterMoveGoal
    let len;
    let data = new PainterMoveGoal(null);
    // Deserialize message field [acceleration]
    data.acceleration = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [velocity]
    data.velocity = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [z_coef]
    data.z_coef = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [ways]
    data.ways = my_robot_move_msgs.msg.Pointss.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += my_robot_move_msgs.msg.Pointss.getMessageSize(object.ways);
    return length + 12;
  }

  static datatype() {
    // Returns string type for a message object
    return 'my_robot_move_actions/PainterMoveGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a335a4998eb8ceb23d4bb2646fae6a2a';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    float32 acceleration
    float32 velocity 
    float32 z_coef
    my_robot_move_msgs/Pointss ways
    
    ================================================================================
    MSG: my_robot_move_msgs/Pointss
    Points[] data
    
    ================================================================================
    MSG: my_robot_move_msgs/Points
    Point[] data
    
    ================================================================================
    MSG: my_robot_move_msgs/Point
    float32 x
    float32 y
    float32 z
    float32 rx
    float32 ry
    float32 rz
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PainterMoveGoal(null);
    if (msg.acceleration !== undefined) {
      resolved.acceleration = msg.acceleration;
    }
    else {
      resolved.acceleration = 0.0
    }

    if (msg.velocity !== undefined) {
      resolved.velocity = msg.velocity;
    }
    else {
      resolved.velocity = 0.0
    }

    if (msg.z_coef !== undefined) {
      resolved.z_coef = msg.z_coef;
    }
    else {
      resolved.z_coef = 0.0
    }

    if (msg.ways !== undefined) {
      resolved.ways = my_robot_move_msgs.msg.Pointss.Resolve(msg.ways)
    }
    else {
      resolved.ways = new my_robot_move_msgs.msg.Pointss()
    }

    return resolved;
    }
};

module.exports = PainterMoveGoal;
