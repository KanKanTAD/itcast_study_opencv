// Auto-generated. Do not edit!

// (in-package my_robot_move_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let Points = require('./Points.js');

//-----------------------------------------------------------

class PainterMoveGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.host = null;
      this.port = null;
      this.acceleration = null;
      this.velocity = null;
      this.epsilon = null;
      this.ways = null;
    }
    else {
      if (initObj.hasOwnProperty('host')) {
        this.host = initObj.host
      }
      else {
        this.host = '';
      }
      if (initObj.hasOwnProperty('port')) {
        this.port = initObj.port
      }
      else {
        this.port = 0;
      }
      if (initObj.hasOwnProperty('acceleration')) {
        this.acceleration = initObj.acceleration
      }
      else {
        this.acceleration = 0.0;
      }
      if (initObj.hasOwnProperty('velocity')) {
        this.velocity = initObj.velocity
      }
      else {
        this.velocity = 0.0;
      }
      if (initObj.hasOwnProperty('epsilon')) {
        this.epsilon = initObj.epsilon
      }
      else {
        this.epsilon = 0.0;
      }
      if (initObj.hasOwnProperty('ways')) {
        this.ways = initObj.ways
      }
      else {
        this.ways = new Points();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PainterMoveGoal
    // Serialize message field [host]
    bufferOffset = _serializer.string(obj.host, buffer, bufferOffset);
    // Serialize message field [port]
    bufferOffset = _serializer.int32(obj.port, buffer, bufferOffset);
    // Serialize message field [acceleration]
    bufferOffset = _serializer.float32(obj.acceleration, buffer, bufferOffset);
    // Serialize message field [velocity]
    bufferOffset = _serializer.float32(obj.velocity, buffer, bufferOffset);
    // Serialize message field [epsilon]
    bufferOffset = _serializer.float32(obj.epsilon, buffer, bufferOffset);
    // Serialize message field [ways]
    bufferOffset = Points.serialize(obj.ways, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PainterMoveGoal
    let len;
    let data = new PainterMoveGoal(null);
    // Deserialize message field [host]
    data.host = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [port]
    data.port = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [acceleration]
    data.acceleration = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [velocity]
    data.velocity = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [epsilon]
    data.epsilon = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [ways]
    data.ways = Points.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.host);
    length += Points.getMessageSize(object.ways);
    return length + 20;
  }

  static datatype() {
    // Returns string type for a message object
    return 'my_robot_move_msgs/PainterMoveGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '2eaee159032b051f1ffcf20961a0ee4e';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    string host
    int32 port
    float32 acceleration
    float32 velocity 
    float32 epsilon
    my_robot_move_msgs/Points ways
    
    
    ================================================================================
    MSG: my_robot_move_msgs/Points
    Point[] data
    
    ================================================================================
    MSG: my_robot_move_msgs/Point
    float32 x
    float32 y
    float32 z
    float32 rx
    float32 ry
    float32 rz
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PainterMoveGoal(null);
    if (msg.host !== undefined) {
      resolved.host = msg.host;
    }
    else {
      resolved.host = ''
    }

    if (msg.port !== undefined) {
      resolved.port = msg.port;
    }
    else {
      resolved.port = 0
    }

    if (msg.acceleration !== undefined) {
      resolved.acceleration = msg.acceleration;
    }
    else {
      resolved.acceleration = 0.0
    }

    if (msg.velocity !== undefined) {
      resolved.velocity = msg.velocity;
    }
    else {
      resolved.velocity = 0.0
    }

    if (msg.epsilon !== undefined) {
      resolved.epsilon = msg.epsilon;
    }
    else {
      resolved.epsilon = 0.0
    }

    if (msg.ways !== undefined) {
      resolved.ways = Points.Resolve(msg.ways)
    }
    else {
      resolved.ways = new Points()
    }

    return resolved;
    }
};

module.exports = PainterMoveGoal;
